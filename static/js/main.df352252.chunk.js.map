{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isLoading","setIsLoading","content","setContent","answer","setAnswer","answerStats","setAnswerStats","isSubmitted","setIsSubmitted","loader","setLoader","texter","setText","question","setQuestion","count","setCount","useEffect","a","axios","url","response","data","placeholder","onChange","event","target","value","onClick","setTimeout","btn","document","getElementById","txtarea","querySelector","addEventListener","toLowerCase","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oSAqFeA,MAjFf,WACE,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAqCN,oBAAS,GAA9C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAqCR,oBAAS,GAA9C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA2BV,oBAAS,GAApC,mBAAOW,EAAP,KAAcC,EAAd,KACA,EAAyBZ,mBAAS,IAAlC,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAA+Bd,mBAAS,0DAAxC,mBAAOe,EAAP,KAAgBC,EAAhB,KACA,EAAyBhB,mBAAS,GAAlC,mBAAOiB,EAAP,KAAaC,EAAb,KAmDA,OAlDAC,oBAAS,sBAAC,8BAAAC,EAAA,6DACRlB,GAAa,GADL,kBAIiBmB,IAAM,CAC3BC,IAAI,mCALA,OAIAC,EAJA,OAOEC,EAASD,EAATC,KACRpB,EAAWoB,GACXR,EAAYb,EAAQ,GAAGY,UACvBb,GAAa,GAVP,kDAaNA,GAAa,GAbP,0DAeP,CAACS,IAoCF,+BACGV,EAAa,4CACd,qCACA,6DACA,mGACA,wBACA,4BAAIc,IACJ,0BAAUU,YAAY,oBAAoBC,SAzCtB,SAACC,GACvBrB,EAAUqB,EAAMC,OAAOC,UAyCrB,8BAAK,wBAAQC,QAtCI,WACnBZ,EAASD,EAAM,GACfc,YAAW,WACoBnB,GAAzBD,GACDF,GAAYC,GAAe,GAC9BI,EAAQ,IACR,IAAIkB,EAAMC,SAASC,eAAe,gBAC9BC,EAAUF,SAASG,cAAc,YAClCJ,GACDA,EAAIK,iBAAiB,SAAQ,WAC3BF,EAAQN,MAAQ,QAIpB,KACCxB,EAAOiC,gBAAkBnC,EAAQ,GAAGE,OAAOiC,eAE5C5B,GAAe,GACfF,GAAe,GACfM,EAAQ,8BAAD,OAA+BX,EAAQ,GAAGE,OAA1C,QAGPK,GAAe,GACfF,GAAe,GACfM,EAAQ,6BAAD,OAA8BX,EAAQ,GAAGE,OAAzC,QAc+BkC,GAAK,eAAtC,sBACJ9B,GAAeF,EAAe,6BAAKM,IAAe,uBAClDJ,IAAgBF,GAAeU,EAAM,EAAK,6BAAKJ,IAAe,uBAChD,8BChEN2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASC,eAAe,SAM1BM,M","file":"static/js/main.df352252.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [answerStats,setAnswerStats] = useState(false);\n  const [isSubmitted,setIsSubmitted] = useState(false);\n  const [loader,setLoader] = useState(false);\n  const [texter,setText] = useState(\"\");\n  const [question,setQuestion] = useState(\"Please click on submit to start and wait for 3 seconds\");\n  const [count,setCount] = useState(0);\n  useEffect(async () => {\n    setIsLoading(true);\n\n    try {\n      const response = await axios({\n        url: `https://jservice.io/api/random`,\n      });\n      const { data } = response;\n      setContent(data);\n      setQuestion(content[0].question);\n      setIsLoading(false);\n    } catch (err) {\n      \n      setIsLoading(false);\n    }\n  }, [loader]);\n\n  const onAnswerHandler = (event) => {\n    setAnswer(event.target.value);\n  }\n\n  const checkHandler = () =>{\n    setCount(count+1);\n    setTimeout(()=>{\n      if(!loader ? setLoader(true):setLoader(false));\n      if(isSubmitted)setIsSubmitted(false);\n      setText(\"\");\n      var btn = document.getElementById('submitButton');\n      let txtarea = document.querySelector('textarea');\n      if(btn){\n        btn.addEventListener('click',()=>{\n          txtarea.value = '';\n        });\n      }\n      \n    },2000);\n    if(answer.toLowerCase() === content[0].answer.toLowerCase())\n    {\n      setIsSubmitted(true);\n      setAnswerStats(true);\n      setText(`You Won!!!, the Answer is \"${content[0].answer}\"`);\n    }\n    else{\n      setIsSubmitted(true);\n      setAnswerStats(false);\n      setText(`InCorrect, the Answer is \"${content[0].answer}\"`);\n    }\n    //setLoader(false);\n    \n  }\n  return (\n    <main>\n      {isLoading ? (<h3>Loading...</h3>):(\n      <>\n      <h4>Hello! Welcome to Quiz Game</h4>\n      <h6>Please Enter your response on below Text Area and click on submit</h6>\n      <div></div>\n      <p>{question}</p>\n      <textarea placeholder=\"Enter your Answer\" onChange = {onAnswerHandler}/>\n      <div><button onClick = {checkHandler} id = \"submitButton\">Submit</button></div>\n      {isSubmitted && answerStats ? (<h3>{texter}</h3>):(<h3></h3>)}\n      {isSubmitted && !answerStats && count>1 ? (<h3>{texter}</h3>):(<h3></h3>)}\n      {count === 0? (<div></div>):(<div></div>)}\n      </>\n      )}  \n    </main>\n    \n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}