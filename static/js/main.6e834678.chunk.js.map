{"version":3,"sources":["App.module.css","Component/Main.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Main","useState","isLoading","setIsLoading","content","setContent","answer","setAnswer","answerStats","setAnswerStats","isSubmitted","setIsSubmitted","loader","setLoader","texter","setText","question","setQuestion","count","setCount","useEffect","a","axios","url","response","data","placeholder","onChange","event","target","value","onClick","setTimeout","btn","document","getElementById","txtarea","querySelector","addEventListener","toLowerCase","class","AppCSS","btnCSS","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,OAAS,sB,iLCmGZC,EAjGF,WAET,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEA,EAAqCN,oBAAS,GAA9C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEA,EAAqCR,oBAAS,GAA9C,mBAAOS,EAAP,KAAmBC,EAAnB,KAEA,EAA2BV,oBAAS,GAApC,mBAAOW,EAAP,KAAcC,EAAd,KACA,EAAyBZ,mBAAS,IAAlC,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAA+Bd,mBAAS,0DAAxC,mBAAOe,EAAP,KAAgBC,EAAhB,KACA,EAAyBhB,mBAAS,GAAlC,mBAAOiB,EAAP,KAAaC,EAAb,KAGAC,oBAAS,sBAAC,8BAAAC,EAAA,6DACRlB,GAAa,GADL,kBAIiBmB,IAAM,CAC3BC,IAAI,mCALA,OAIAC,EAJA,OAOEC,EAASD,EAATC,KACRpB,EAAWoB,GACXR,EAAYb,EAAQ,GAAGY,UACvBb,GAAa,GAVP,kDAaNA,GAAa,GAbP,0DAeP,CAACS,IAyCJ,OACE,+BACGV,EAAa,4CACd,qCACA,6DACA,mGACA,wBACA,4BAAIc,IACJ,0BAAUU,YAAY,oBAAoBC,SA9CtB,SAACC,GACvBrB,EAAUqB,EAAMC,OAAOC,UA8CrB,8BAAK,wBAAQC,QA1CI,WACnBZ,EAASD,EAAM,GAEfc,YAAW,WACoBnB,GAAzBD,GACDF,GAAYC,GAAe,GAE9BI,EAAQ,IAER,IAAIkB,EAAMC,SAASC,eAAe,gBAC9BC,EAAUF,SAASG,cAAc,YAClCJ,GACDA,EAAIK,iBAAiB,SAAQ,WAC3BF,EAAQN,MAAQ,QAIpB,KAGCxB,EAAOiC,gBAAkBnC,EAAQ,GAAGE,OAAOiC,eAE5C5B,GAAe,GACfF,GAAe,GACfM,EAAQ,8BAAD,OAA+BX,EAAQ,GAAGE,OAA1C,QAIPK,GAAe,GACfF,GAAe,GACfM,EAAQ,6BAAD,OAA8BX,EAAQ,GAAGE,OAAzC,QAY+BkC,MAASC,IAAOC,OAAjD,sBAEJhC,GAAeF,EAAe,6BAAKM,IAAe,uBAElDJ,IAAgBF,GAAeU,EAAM,EAAK,6BAAKJ,IAAe,uBAEhD,8BCpFR6B,MAPf,WACE,OAEE,aADA,CACC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.6e834678.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnCSS\":\"App_btnCSS__2Gmj8\"};","import AppCSS from \"../App.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nconst Main = () =>{\r\n    //Loading is use to display loading screen \r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //setContent is for displaying question\r\n    const [content, setContent] = useState(\"\");\r\n    //Displaying answers\r\n    const [answer, setAnswer] = useState(\"\");\r\n    //Check if the answer provided by user is correct\r\n    const [answerStats,setAnswerStats] = useState(false);\r\n    //check if the button is clicked \r\n    const [isSubmitted,setIsSubmitted] = useState(false);\r\n    //use to change the question by reloading api\r\n    const [loader,setLoader] = useState(false);\r\n    const [texter,setText] = useState(\"\");\r\n    const [question,setQuestion] = useState(\"Please click on submit to start and wait for 3 seconds\");\r\n    const [count,setCount] = useState(0);\r\n\r\n    //Getting API call\r\n    useEffect(async () => {\r\n      setIsLoading(true);\r\n  \r\n      try {\r\n        const response = await axios({\r\n          url: `https://jservice.io/api/random`,\r\n        });\r\n        const { data } = response;\r\n        setContent(data);\r\n        setQuestion(content[0].question);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        \r\n        setIsLoading(false);\r\n      }\r\n    }, [loader]);\r\n  \r\n    // Below code is use to get the input from user using Text Area\r\n    const onAnswerHandler = (event) => {\r\n      setAnswer(event.target.value);\r\n    }\r\n\r\n    //Behaviour after clicking on submit \r\n    const checkHandler = () =>{\r\n      setCount(count+1);\r\n      //clear text and wait for x seconds before displaying new question\r\n      setTimeout(()=>{\r\n        if(!loader ? setLoader(true):setLoader(false));\r\n        if(isSubmitted)setIsSubmitted(false);\r\n        //Clear text on next questions\r\n        setText(\"\");\r\n        //Clear text area\r\n        var btn = document.getElementById('submitButton');\r\n        let txtarea = document.querySelector('textarea');\r\n        if(btn){\r\n          btn.addEventListener('click',()=>{\r\n            txtarea.value = '';\r\n          });\r\n        }\r\n        \r\n      },2000);\r\n      //Convert both Given answer and solution provided by User to lower case\r\n      //Correct answer block\r\n      if(answer.toLowerCase() === content[0].answer.toLowerCase())\r\n      {\r\n        setIsSubmitted(true);\r\n        setAnswerStats(true);\r\n        setText(`You Won!!!, the Answer is \"${content[0].answer}\"`);\r\n      }\r\n      //Incorrect Answer block\r\n      else{\r\n        setIsSubmitted(true);\r\n        setAnswerStats(false);\r\n        setText(`InCorrect, the Answer is \"${content[0].answer}\"`);\r\n      }\r\n    }\r\n    return (\r\n      <main>\r\n        {isLoading ? (<h3>Loading...</h3>):(\r\n        <>\r\n        <h4>Hello! Welcome to Quiz Game</h4>\r\n        <h6>Please Enter your response on below Text Area and click on submit</h6>\r\n        <div></div>\r\n        <p>{question}</p>\r\n        <textarea placeholder=\"Enter your Answer\" onChange = {onAnswerHandler}/>\r\n        <div><button onClick = {checkHandler} class = {AppCSS.btnCSS}>Submit</button></div>\r\n        {/*Display if answer is correct*/}\r\n        {isSubmitted && answerStats ? (<h3>{texter}</h3>):(<h3></h3>)}\r\n        {/*Display if answer is Wrong--------------*/}\r\n        {isSubmitted && !answerStats && count>1 ? (<h3>{texter}</h3>):(<h3></h3>)}\r\n        {/*Home Screen Content-------------------- */}\r\n        {count === 0? (<div></div>):(<div></div>)}\r\n        </>\r\n        )}  \r\n      </main>\r\n      \r\n    \r\n    );\r\n}\r\nexport default Main;","import Main from \"./Component/Main\";\nfunction App() {\n  return (\n    //Main is a component fetch from \n    <Main />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}